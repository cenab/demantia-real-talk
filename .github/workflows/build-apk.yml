name: Build and Deploy Android APK

on:
  push:
    branches:
      - main
    paths:
      - 'ishe-client/**'
      - '.github/workflows/build-apk.yml'
      - 'util/keystore/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Cache Node modules
      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 3. Setup Node
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # 4. Cache Gradle
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 5. Setup Java
      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      # 6. Expo & EAS CLI
      - name: Install Expo & EAS CLI
        run: npm install -g expo-cli eas-cli

      # 7. (Optional) Ensure your baseline eas.json is committed; remove dynamic creation

      # 8. Create .env
      - name: Create environment file
        working-directory: ./ishe-client
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env

      # 9. Install JS deps
      - name: Install dependencies
        working-directory: ./ishe-client
        run: npm install

      # 10. Build APK (local vs. EAS)
      - name: Build APK
        working-directory: ./ishe-client
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          if [ -z "$EXPO_TOKEN" ]; then
            echo "🔨 Local build"
            mkdir -p build
            mkdir -p android/app/keystores
            cp $GITHUB_WORKSPACE/util/keystore/ishe-release-key.keystore android/app/keystores/
            npx expo prebuild --platform android --env-file .env
            cd android
            ./gradlew assembleRelease
            cp app/build/outputs/apk/release/app-release.apk ../build/ishe.apk
          else
            echo "☁️  Cloud EAS build"
            eas build --platform android --profile preview --non-interactive --output-dir ./build
          fi

      # 11. SSH agent
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # 12. Deploy to EC2
      - name: Deploy APK and keystore to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

          ls -la ./ishe-client/build/
          file ./ishe-client/build/ishe.apk

          ssh $EC2_USER@$EC2_HOST "sudo mkdir -p /var/www/downloads /var/www/keystore"

          scp -v ./ishe-client/build/ishe.apk $EC2_USER@$EC2_HOST:~/ishe.apk
          scp ./util/keystore/ishe-release-key.keystore $EC2_USER@$EC2_HOST:~/ishe-release-key.keystore

          ssh $EC2_USER@$EC2_HOST << 'EOF'
            sudo mv ~/ishe.apk /var/www/downloads/ && sudo chmod 644 /var/www/downloads/ishe.apk && sudo chown nginx:nginx /var/www/downloads/ishe.apk
            sudo mv ~/ishe-release-key.keystore /var/www/keystore/ && sudo chmod 644 /var/www/keystore/ishe-release-key.keystore
            ls -la /var/www/downloads/
          EOF

          curl -I http://$EC2_HOST/downloads/ishe.apk
